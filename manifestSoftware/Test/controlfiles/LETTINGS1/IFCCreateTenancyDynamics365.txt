WWW.BLAZE-IS.COM
DELIM=$$
TYPE=INTERFACE
FROM=Orchard Housing Database
TIMER=900
DESCRIPTION=Creates Tenancy record in Orchard 
TRIGGER=
TRIGGERFIELDS=
$$

/*
-- =======================================================================================================================================
--	Author:			Matt Toynbee
--	Description:	Creates Tenancy record in D365
-- =======================================================================================================================================
--	Change log:
--	Version			Date		Author				Description
--  -------			----------	----------------	----------------------------------------------------
--	v1.1			
-- =======================================================================================================================================
*/

P=ReadThreadParameters("C:\ManifestSoftware\TEST\ControlFiles\THREADPARAMS.xml")

// Create Log GUID
SQLG=SQLSELECTNEWGUID($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$)

// Create process queue entries
SQLQ=SQLINSERTPendingCreateTenancyRequests($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$)

NEXTRECORD:

// Select next Tenancy to create in MRI
TEN=SQLSELECTNextCreateTenancyWorkflow($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,"Create Tenancy (Dynamics 365)")

// If no more records to process, finish process.
IFGOTO($$TEN.HEADER.QueueID$$,"=","","END:")

// Mark record as pre-processed
SQLP=SQLUPDATELettingsProcessQueue($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$TEN.HEADER.QueueID$$,"Pre-Processed","","")

//
// POPULATE DATA SYNC TABLES
//

// Insert CRM Sync data into respective tables
SYNCDATA=SQLINSERTSyncData($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$TEN.HEADER.BatchGUID$$,$$TEN.HEADER.TenancyNumber$$,"300")

// Mark record as processed
SQLP=SQLUPDATELettingsProcessQueue($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$TEN.HEADER.QueueID$$,"Processed","","")

GOTO("NEXTRECORD:")

END:

STOPIFEMPTY("")
























































//Check if there is a tenancy for this application number
APPCHK=OISCheckTenancyFromAppNum($$P.HEADER.OISWSCreateTenancyURL$$,$$P.HEADER.OISWSUser$$,$$P.HEADER.OISWSPassword$$,"Y","Y",$$TEN.HEADER.ApplicationNumber$$)

// Log Response from MRI
LOGRESP=SQLINSERTMSSRequestResponse($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$SQLG.HEADER.GUID$$,"IFCCreateTenancyMRI","OISCheckTenancyFromAppNum - Response",$$APPCHK.RESPONSE$$)

// Log Error from MRI
LOGERR=SQLINSERTMSSRequestResponse($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$SQLG.HEADER.GUID$$,"IFCCreateTenancyMRI","OISCheckTenancyFromAppNum - Error",$$APPCHK.ERROR$$)

// Mark as errored
SQLERR=SQLUPDATELettingsProcessQueue($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$TEN.HEADER.QueueID$$,"Error","OISCheckTenancyFromAppNum",$$APPCHK.ERROR$$,"")

// If error reported - create notification
IFGOTO($$SQLERR.HEADER.QueueID$$,"<>","","REPORTERROR:")

// Set parameter returned
SETPK=SETPK("SET",$$APPCHK.HEADER.PK$$)

//if there is goto CRM:
IFGOTO($$APPCHK.HEADER.PK$$,"<>","","DASHVERIFY:")

//Create Tenancy In MRI
TENANCYADD=OISCreateTenancy($$P.HEADER.OISWSCreateTenancyURL$$,$$P.HEADER.OISWSUser$$,$$P.HEADER.OISWSPassword$$,"Y","Y",$$TEN.HEADER.ApplicationNumber$$,$$TEN.HEADER.HouseholdGroupCode$$,$$TEN.HEADER.SignupCompletedDate$$,$$TEN.HEADER.SwipeEffectiveDate$$,$$TEN.HEADER.SwipeReqType$$,$$TEN.HEADER.TenancyReasonCode$$,$$TEN.HEADER.TenancyStartDate$$,$$P.PARAM10$$,$$TEN.HEADER.PropertySequenceNumber$$,"300")

// Log Response from MRI
LOGRESP=SQLINSERTMSSRequestResponse($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$SQLG.HEADER.GUID$$,"IFCCreateTenancyMRI","OISCreateTenancy - Response",$$TENANCYADD.RESPONSE$$)

// Log Error from MRI
LOGERR=SQLINSERTMSSRequestResponse($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$SQLG.HEADER.GUID$$,"IFCCreateTenancyMRI","OISCreateTenancy - Error",$$TENANCYADD.ERROR$$)

// Mark as errored
SQLERR=SQLUPDATELettingsProcessQueue($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$TEN.HEADER.QueueID$$,"Error","OISCreateTenancy",$$TENANCYADD.ERROR$$,"")

// If error reported - notify business
IFGOTO($$SQLERR.HEADER.QueueID$$,"<>","","REPORTERROR:")

// Add Tenancy Number to log
SQLUPD=SQLUPDATETenancyRequestLog($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$TEN.HEADER.ID$$,"TenancyNumber",$$TENANCYADD.HEADER.PK$$)

// Mark as processed
SQLP=SQLUPDATELettingsProcessQueue($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,$$TEN.HEADER.QueueID$$,"Processed","","")

//
// Add Tenancy ERROR
//

REPORTERROR:

// Create Email Notification
SETERROREMAIL=SETERROREMAIL("CLEAR","","","","","","","")
SETERROREMAIL=SETERROREMAIL("SET","MRI Create Tenancy","create an MRI Tenancy","Application Number:",$$TEN.HEADER.ApplicationNumber$$,"","",$$TENANCYADD.ERROR$$)

//Send notification to notification queue
NOTIF=SQLINSERTNotification($$P.HEADER.SQLInstance$$,$$P.HEADER.SQLDatabase$$,$$P.HEADER.SQLUser$$,$$P.HEADER.SQLPassword$$,"Email","Create Tenancy Errors","SOUTHERN HOUSING TEST - Create Tenancy Error",$$SETERROREMAIL.VALUE$$)

STOPIFEMPTY("")
